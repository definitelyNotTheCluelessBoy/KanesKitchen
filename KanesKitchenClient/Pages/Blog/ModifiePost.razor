@page "/modify-post/{PostId:int}"
@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject IJSRuntime JS
@inject IStringLocalizer<PostResource> resource

<h3 class="mb-4">@resource["ModifieHeader"]</h3>

<div class="card shadow-sm mb-4" style="max-width: 700px;">
    <div class="card-body">
        <EditForm Model="postContent" OnValidSubmit="HandleValidSubmit" class="row g-3">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <!-- Post Content -->
            <div class="col-12">
                <label class="form-label fw-bold">@resource["Content"]</label>
                <InputTextArea @bind-Value="postContent" class="form-control" rows="5" />
            </div>

            <!-- Action Buttons -->
            <div class="col-12 mt-3 d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">Update Post</button>
                <button type="button" class="btn btn-danger" @onclick="HandleDelete">@resource["DeletePostButton"]</button>
            </div>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-info">
        <pre class="m-0">@statusMessage</pre>
    </div>
}

@code {
    [Parameter]
    public int PostId { get; set; }

    private string postContent = string.Empty;
    private string statusMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var post = await PostService.GetPostAsync(PostId);
        if (post != null)
        {
            postContent = post.Content;
        }
    }

    private async Task HandleValidSubmit()
    {
        statusMessage = string.Empty;
        try
        {
            var result = await PostService.UpdatePostAsync(PostId, postContent);
            statusMessage = $"Post update complete with result: {result}";
            NavigationManager.NavigateTo($"/post/{PostId}");
        }
        catch (Exception ex)
        {
            statusMessage = $"Error updating post: {ex.Message}";
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this post?");
        if (confirm)
        {
            var result = await PostService.DeletePostAsync(PostId);
            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                statusMessage = "Post deleted successfully.";
                NavigationManager.NavigateTo("/forum");
            }
            else
            {
                statusMessage = "Failed to delete the post.";
            }
        }
    }
}
