@page "/account/register"
@inject AuthenticationStateProvider AuthicationStateProvider
@inject NavigationManager NavManager
@inject IJSRuntime JS
@inject IStringLocalizer<RegisterResource> resource

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <EditForm Model="RegisterDto" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card">
                    <div class="card-header">@resource["Header"]</div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">@resource["UserName"]</label>
                            <InputText @bind-Value="RegisterDto.UserName" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">@resource["Email"]</label>
                            <InputText @bind-Value="RegisterDto.Email" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">@resource["Password"]</label>
                            <input type="password" @bind="RegisterDto.Password" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <label class="form-label">@resource["ConfirmPassword"]</label>
                            <input type="password" @bind="RegisterDto.ConfirmPassword" class="form-control" />
                        </div>

                        <div class="form-group mt-3">
                            <button class="btn btn-outline-primary float-end" type="submit">@resource["Register"]</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    RegisterDto RegisterDto = new();

    async Task HandleRegistration()
    {
        var apiRegisterResponse = await UserManagmentService.RegisterAsync(RegisterDto);
        if (apiRegisterResponse.Success)
        {
            var apiLoginResponse = await UserManagmentService.LoginAsync(new LoginDto
                {
                    UserName = RegisterDto.UserName,
                    Password = RegisterDto.Password
                });
            var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)AuthicationStateProvider;
            await customAuthenticationStateProvider.UpdateAuthenticationState(new Session
                {
                    Token = apiLoginResponse.Token,
                    RefreshToken = apiLoginResponse.RefreshToken
                });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // Display the error message from the API response
            await JS.InvokeVoidAsync("alert", apiRegisterResponse.Message);
        }
    }
}
